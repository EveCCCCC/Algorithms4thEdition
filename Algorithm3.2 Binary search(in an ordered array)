Algorithm3.2 Binary search(in an ordered array)


public class BinarySearchST<Key extends Comparable<Key>, Value>{
	private Key[] keys;
	private Value[] vals;
	private int N = 0;

	public BinartySearchST(int capacity){
		keys = (Key[]) new Comparable[capacity];
		vals = (Value[]) new Object[capacity];
	}

	public int size(){
		return N;
	}

//iterative binary search
	public int rank(Key key){
		int lo = 0,
		int hi = N - 1;

		while(lo <= hi){
			int mid = lo + (hi - lo) / 2;
			int cmp = key.compareTo(keys[mid]);
			if		(cmp < 0)	hi = mid + 1;
			else if	(cmp > 0)	lo = mid - 1;
			else				return mid;
		}

		return lo;
	}

//recursive binary search
	public int rank(Key key, int lo, int hi){
		if(lo > hi)	return lo;
		int mid = lo + (hi - lo) / 2;
		int cmp = key.comparaTo(keys[mid]);
		if		(cmp < 0) 	return rank(key, lo, mid - 1);
		else if	(cmp > -)	return rank(key, mid + 1, hi);
		else				return mid
	}

	public Value get(Key key){
		if(isEmpty()) return null;
		int i = rank(key);
		if(i < N && key[i].compareTo(key) == 0)	return vals[i];
		else									return null;
	}

	public void put(Key key, Value val){
		int i = rank(key);
		if (i < N && keys[i].comparaTo(key) == 0){
			vals[i] = val;
			return;
		}
		for(int j = N ; j > i; j--){
			keys[j] = keys[j - 1];
			vals[j] = vals[j - 1];
		}
		keys[i] = key;
		vals[i] = val;
		N++;
	}

	public Iterable<Key> keys(Key lo, Key hi){
		Queue<Key> q = new Queue<Key>();
		for (int i = rank(lo); i < rank(hi); i++){
			q.enqueque(keys[i]);
		}
		if(contains(hi)){
			q.enqueque(keys[rank(hi)]);
		}
		return q;
	}
}









